<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="3.057" timestamp="2021-10-29T19:17:40.292799" hostname="Felipe-PC"><testcase classname="challenges.test_challengeSeven.Testchallenges" name="test_challengeOne" file="challenges\test_challengeSeven.py" line="4" time="2.920"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//*[@id='Serverside Quickpicks']/div/div/div[1]/ul/li[1]/a&quot;}&#10;  (Session info: chrome=95.0.4638.54)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x00E2BDE3+2473443]&#10;&#09;Ordinal0 [0x00DC6661+2057825]&#10;&#09;Ordinal0 [0x00CD2438+1057848]&#10;&#09;Ordinal0 [0x00CFC7DB+1230811]&#10;&#09;Ordinal0 [0x00D26712+1402642]&#10;&#09;Ordinal0 [0x00D1571A+1333018]&#10;&#09;Ordinal0 [0x00D24ABF+1395391]&#10;&#09;Ordinal0 [0x00D155AB+1332651]&#10;&#09;Ordinal0 [0x00CF2104+1188100]&#10;&#09;Ordinal0 [0x00CF2F59+1191769]&#10;&#09;GetHandleVerifier [0x00FB2266+1549718]&#10;&#09;GetHandleVerifier [0x0105D4A7+2250711]&#10;&#09;GetHandleVerifier [0x00EB718B+521403]&#10;&#09;GetHandleVerifier [0x00EB6229+517465]&#10;&#09;Ordinal0 [0x00DCB79D+2078621]&#10;&#09;Ordinal0 [0x00DCFB58+2095960]&#10;&#09;Ordinal0 [0x00DCFC92+2096274]&#10;&#09;Ordinal0 [0x00DD9541+2135361]&#10;&#09;BaseThreadInitThunk [0x75576739+25]&#10;&#09;RtlGetFullPathName_UEx [0x77518AFF+1215]&#10;&#09;RtlGetFullPathName_UEx [0x77518ACD+1165]">self = &lt;test_challengeSeven.Testchallenges object at 0x00000297F677C040&gt;

    def test_challengeOne(self):
        self.driver.get("https://www.copart.com/")
        copa = homePage(self.driver)
&gt;       copa.getMakes()

challenges\test_challengeSeven.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pageObjects\copartMainPage.py:19: in getMakes
    e = self.driver.find_element(*homePage.makes_homePage)
seleniumEnv\lib\site-packages\selenium\webdriver\remote\webdriver.py:1238: in find_element
    return self.execute(Command.FIND_ELEMENT, {
seleniumEnv\lib\site-packages\selenium\webdriver\remote\webdriver.py:418: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000297F676CA90&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...unk [0x75576739+25]\\n\\tRtlGetFullPathName_UEx [0x77518AFF+1215]\\n\\tRtlGetFullPathName_UEx [0x77518ACD+1165]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='Serverside Quickpicks']/div/div/div[1]/ul/li[1]/a"}
E         (Session info: chrome=95.0.4638.54)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x00E2BDE3+2473443]
E       	Ordinal0 [0x00DC6661+2057825]
E       	Ordinal0 [0x00CD2438+1057848]
E       	Ordinal0 [0x00CFC7DB+1230811]
E       	Ordinal0 [0x00D26712+1402642]
E       	Ordinal0 [0x00D1571A+1333018]
E       	Ordinal0 [0x00D24ABF+1395391]
E       	Ordinal0 [0x00D155AB+1332651]
E       	Ordinal0 [0x00CF2104+1188100]
E       	Ordinal0 [0x00CF2F59+1191769]
E       	GetHandleVerifier [0x00FB2266+1549718]
E       	GetHandleVerifier [0x0105D4A7+2250711]
E       	GetHandleVerifier [0x00EB718B+521403]
E       	GetHandleVerifier [0x00EB6229+517465]
E       	Ordinal0 [0x00DCB79D+2078621]
E       	Ordinal0 [0x00DCFB58+2095960]
E       	Ordinal0 [0x00DCFC92+2096274]
E       	Ordinal0 [0x00DD9541+2135361]
E       	BaseThreadInitThunk [0x75576739+25]
E       	RtlGetFullPathName_UEx [0x77518AFF+1215]
E       	RtlGetFullPathName_UEx [0x77518ACD+1165]

seleniumEnv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:243: NoSuchElementException</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase></testsuite></testsuites>